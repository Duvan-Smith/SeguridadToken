@page "/login"

<PageTitle>Weather forecast</PageTitle>

@using Blazored.SessionStorage
@using SeguridadToken.Dto
@using SeguridadToken.Presentacion.Login
@using SeguridadToken.Presentacion.MyAuthentication
@inject ILoginService loginService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISessionStorageService sessionStorageService
@inject NavigationManager navigationManage

<h1>Iniciar sesión</h1>

<EditForm Model="@LoginUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <div class="form-group row">
        <label for="Email">
            Email
        </label>
        <div>
            <InputText id="Email" placeholder="Email" @bind-Value="LoginUser.User"/>
            <ValidationMessage For="@(()=>LoginUser.User)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Password">
            Password
        </label>
        <div>
            <InputText id="Password" placeholder="Email" @bind-Value="LoginUser.Password"/>
            <ValidationMessage For="@(()=>LoginUser.Password)" />
        </div>
    </div>
    <tr/>
    <div>
        <input type="submit" value="Login" @onclick="ValidarUsuario"/>
    </div>
</EditForm>

@code {
    public LoginDto LoginUser = new LoginDto();
    public UserDto? User;

    public void HandleValidSubmit(){

    }

    private async Task<bool> ValidarUsuario(){
        ((MyAuthenticationStateProviderService)authenticationStateProvider).UserAuthenticated(LoginUser.User);
        await sessionStorageService.SetItemAsync("email",LoginUser.User);
        navigationManage.NavigateTo("/index");
        return await Task.FromResult(true);
    }

    protected override async Task OnInitializedAsync()
    {
        //User = await LoginService.ActionLogin(new LoginDto
        //    {
        //    User="admin",
        //    Password="admin"
        //});
        //Environment.SetEnvironmentVariable("token", User.Token);
    }
}