@page "/login"

<PageTitle>Weather forecast</PageTitle>

@using Blazored.SessionStorage
@using SeguridadToken.Dto
@using SeguridadToken.Presentacion.Login
@using SeguridadToken.Presentacion.MyAuthentication
@inject ILoginService loginService
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISessionStorageService sessionStorageService
@inject NavigationManager navigationManage

<h1>Iniciar sesión</h1>

<EditForm Model="@LoginUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="Email">
            Email
        </label>
        <div>
            <InputText id="Email" placeholder="Email" @bind-Value="LoginUser.User" />
            <ValidationMessage For="@(()=>LoginUser.User)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Password">
            Password
        </label>
        <div>
            <InputText id="Password" placeholder="Email" @bind-Value="LoginUser.Password" />
            <ValidationMessage For="@(()=>LoginUser.Password)" />
        </div>
    </div>
    <tr />
    <div>
        <input type="submit" value="Login" @onclick="ValidarUsuario" />
    </div>
    @if (MsmError != null)
    {
        <div>
            @MsmError
        </div>
    }
</EditForm>

@code {
    public LoginDto LoginUser = new LoginDto();
    public UserDto? User;
    public string? MsmError;

    public void HandleValidSubmit()
    {

    }

    private async Task ValidarUsuario()
    {
        try
        {
            if (User?.Email != null && User?.Password != null)
            {
                User = await loginService.UserValidate(User);

                ((MyAuthenticationStateProviderService)authenticationStateProvider).UserAuthenticated(User.Email);
                await sessionStorageService.SetItemAsync("email", User.Email);
                navigationManage.NavigateTo("/index");
            }else{
                User = await loginService.ActionLogin(LoginUser);

                ((MyAuthenticationStateProviderService)authenticationStateProvider).UserAuthenticated(User.Email);
                await sessionStorageService.SetItemAsync("email", User.Email);
                navigationManage.NavigateTo("/index");
                Environment.SetEnvironmentVariable("token", User.Token);
            }
        }
        catch (Exception)
        {
            MsmError = "Error al iniciar sessión";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LoginUser.User = Environment.GetEnvironmentVariable("UserAPI");
            LoginUser.Password = Environment.GetEnvironmentVariable("PasswordAPI");
            User = await loginService.ActionLogin(LoginUser);
            Environment.SetEnvironmentVariable("token", User.Token);
        }
        catch (Exception)
        {
            MsmError = "Error al iniciar sessión, en el inicio.";
        }
    }
}